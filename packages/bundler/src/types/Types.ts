import { ethers, BigNumber } from 'ethers'
import { ChainId, UserOperation } from '@biconomy-devx/core-types'

export type Bundlerconfig = {
  bundlerUrl: string
  entryPointAddress?: string
  apiKey: string // TODO: needs to be removed
  chainId: ChainId
  userOpReceiptIntervals?: { [key in ChainId]?: number }
}

export type UserOpReceipt = {
  userOpHash: string
  entryPoint: string
  sender: string
  nonce: number
  paymaster: string
  actualGasCost: BigNumber
  actualGasUsed: BigNumber
  success: boolean
  reason: string
  logs: Array<ethers.providers.Log> // The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle)
  receipt: ethers.providers.TransactionReceipt
}

export type GetUserOperationResponse = {
  statusCode: number
  message: string
  result: UserOpReceipt
}

export type SendUserOpResponse = {
  statusCode: number
  message: string
  result: string
}

export type UserOpResponse = {
  userOpHash: string
  wait(confirmations?: number): Promise<UserOpReceipt>
}

export type EstimateUserOpGasResponse = {
  statusCode: number
  message: string
  result: UserOpGasResponse
}

export type UserOpGasResponse = {
  preVerificationGas: string
  verificationGasLimit: string
  callGasLimit: string
  maxPriorityFeePerGas: string
  maxFeePerGas: string
}

export type GetUserOpByHashResponse = {
  statusCode: number
  message: string
  result: UserOpByHashResponse
}

//  TODO: need to verify this type from infinitism bundler, stackup
export type UserOpByHashResponse = UserOperation & {
  transactionHash: string
  blockNumber: number
  blockHash: string
  entryPoint: string
}
